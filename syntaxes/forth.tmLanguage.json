{
	"name": "Forth",
	"patterns": [
		{
			"include": "#all-includes"
		}
	],
	"repository": {
		"all-includes": {
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#keywords"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#constants"
				},
				{
					"include": "#storage"
				},
				{
					"include": "#word-defs"
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"name": "comment.block.parantheses.forth",
					"begin": "(?<=^|\\s)\\(\\s",
					"end": "\\)"
				},
				{
					"name": "comment.block.parantheses.forth",
					"begin": "(?<=^|\\s)\\\\\\*\\s",
					"end": "\\*\\\\"
				},
				{
					"comment": "gForth line comment",
					"match": "(?<=^|\\s)(\\\\[Gg] .*$)",
					"name": "comment.line.backslash-g.forth"
				},
				{
					"comment": "\\ line comment",
					"match": "(?<=^|\\s)(\\\\\\s.*$)",
					"name": "comment.line.backslash.forth"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"match": "(?<=^|\\s)\\[(?i:(\\?DO|\\+LOOP|AGAIN|BEGIN|DEFINED|DO|ELSE|ENDIF|FOR|IF|IFDEF|IFUNDEF|LOOP|NEXT|REPEAT|THEN|UNTIL|WHILE))\\](?=\\s)",
					"name": "keyword.control.immediate.forth"
				},
				{
					"match": "(?<=^|\\s)(?i:(-DO|\\-LOOP|\\?DO|\\?LEAVE|\\+DO|\\+LOOP|ABORT\\\"|AGAIN|AHEAD|BEGIN|CASE|DO|ELSE|ENDCASE|ENDIF|ENDOF|ENDTRY\\-IFERROR|ENDTRY|FOR|IF|IFERROR|LEAVE|LOOP|NEXT|RECOVER|REPEAT|RESTORE|THEN|TRY|U\\-DO|U\\+DO|UNTIL|WHILE))(?=\\s)",
					"name": "keyword.control.compile-only.forth"
				},
				{
					"match": "(?<=^|\\s)(?i:(~~|BREAK:|BREAK\"|DBG))(?=\\s)",
					"name": "keyword.other.warning.forth"
				},
				{
					"match": "(?<=^|\\s)(?i:(COMPILE-ONLY|IMMEDIATE|IS|RESTRICT|TO|WHAT'S|]))(?=\\s)",
					"name": "keyword.other.immediate.forth"
				},
				{
					"match": "(?<=^|\\s)(?i:('|<IS>|<TO>|CHAR|END-STRUCT|INCLUDE[D]?|LOAD|NEEDS|REQUIRE[D]?|REVISION|SEE|STRUCT|THRU|USE|OBJECT|CLASS|END-CLASS|M:|;M|PROTECTED|PUBLIC|interface|end-interface))(?=\\s)",
					"name": "keyword.other.non-immediate.forth"
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"name": "string.quoted.double.forth",
					"begin": "\\s+(s|\\.|abort)\"",
					"end": "\""
				},
				{
					"comment": "",
					"match": "(?i:((?<=INCLUDE)|(?<=NEEDS)|(?<=REQUIRE)|(?<=USE)))[ ]\\S+(?=\\s)",
					"name": "string.unquoted.forth"
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"match": "(?i:(?<=^|\\s)(TRUE|FALSE|BL|PI|CELL|C/L|R/O|W/O|R/W)(?=\\s))",
					"name": "constant.language.forth"
				},
				{
					"match": "(?<=^|\\s)([$#%]?[-+]?[0-9]+((\\.[0-9]*)?e(-?[0-9]+)|\\.?[0-9a-fA-F]*))(?=\\s)",
					"name": "constant.numeric.forth"
				},
				{
					"match": "(?<=^|\\s)('\\S')(?=\\s)",
					"name": "constant.character.forth"
				}
			]
		},
		"storage": {
			"patterns": [
				{
					"comment": "",
					"match": "(?<=^|\\s)(?i:(2CONSTANT|2VARIABLE|ALIAS|CONSTANT|CREATE-INTERPRET/COMPILE[:]?|CREATE|DEFER|FCONSTANT|FIELD|FVARIABLE|USER|VALUE|VARIABLE|VOCABULARY|METHOD|OVERRIDES|implementation|selector|inst-value|inst-var))(?=\\s)",
					"name": "storage.type.forth"
				}
			]
		},
		"word-defs": {
			"begin": "(^:|\\s:)\\s+(\\S+)\\s|(?i:(:NONAME))",
			"beginCaptures": {
				"1": {
					"name": "keyword.other.compile-only.forth"
				},
				"2": {
					"name": "entity.name.function.forth"
				},
				"3": {
					"name": "keyword.other.compile-only.forth"
				},
				"4": {
					"name": "keyword.other.word.forth"
				}
			},
			"end": "(;(?i:CODE)?)",
			"endCaptures": {
				"0": {
					"name": "keyword.other.compile-only.forth"
				}
			},
			"name": "meta.block.forth",
			"patterns": [
				{
					"include": "#all-includes"
				}
			]
		}
	},
	"scopeName": "source.forth"
}